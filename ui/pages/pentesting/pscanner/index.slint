
import { HorizontalBox, VerticalBox, StandardTableView, GroupBox, LineEdit, ComboBox, Button, StandardListView, ListView,Palette, ProgressIndicator} from "std-widgets.slint";
import {PortScanner} from "../../../globals.slint";
import {Theme} from "../../../theme.slint";

export component PortScannerScreen inherits VerticalBox{
        alignment:start;
        VerticalBox {
            GroupBox {
                HorizontalBox {
                    spacing: 5px;
                    ip := LineEdit {
                        placeholder-text: @tr("Host name/ip address:(Default:localhost)");
                        input-type: text;
                    }
                    sp := LineEdit {
                        placeholder-text: @tr("Starting port: (Default:1)");
                        input-type: number;
                    }
                    tp := LineEdit {
                        placeholder-text: @tr("Ending port: (Default:3000)");
                        input-type: number;
                    }

                    Button {
                        text: "Scan ";
                        clicked => {
                            if ip.text=="localhost" || ip.text==""{
                                PortScanner.begin_scan("localhost",sp.text,tp.text)
                            }else{
                                PortScanner.begin_scan(ip.text,sp.text,tp.text)
                            }
                        }
                    }
                }
            }
            if PortScanner.v_ip:
            Text {
                color: red;
                text: "Please enter a valid host name/ip address.";
                horizontal-alignment: center;
            }
            
            if PortScanner.loading: Rectangle{ ProgressIndicator{indeterminate:true;}}
            
            GroupBox {
                title: @tr("Open Ports");
                VerticalBox {
                    HorizontalBox {
                        //visible: PortScanner.open_ports.length>0;
                        ports:=StandardListView {
                            model: PortScanner.open_ports;
                            current-item: 0;
                
                        }
                        VerticalBox {
                            Button {
                                text: "Attack port "+ports.model[ports.current-item].text;

                            }
                            Button {
                                text: "Close port "+ports.model[ports.current-item].text;
                            }
                        }
                    }
                
                    Text {
                        visible: PortScanner.open_ports.length<1;
                        horizontal-alignment: center;
                        text: "No results yet";
                        font-weight: Theme.typo.header.weight;
                    }

                }
            }
        }
}
